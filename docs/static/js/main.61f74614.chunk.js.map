{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","props","onAdd","useState","inputValue","setInputValue","onSubmit","e","preventDefault","prevValue","onChange","value","target","type","placeholder","GifGridItem","title","gif","className","src","alt","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","id","images","downsized_medium","user","username","GifGrid","isLoading","state","setState","useEffect","then","useFetchGift","GifExpertApp","categories","setCategories","length","cate","i","ReactDOM","render","document","getElementById"],"mappings":"6LAEaA,EAAc,SAACC,GACxB,IAAQC,EAAUD,EAAVC,MACR,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,8BACI,sBAAMC,SATd,SAAsBC,GAClBA,EAAEC,iBACiB,KAAfJ,IACAF,GAAM,SAAAO,GAAS,OAAKL,GAAL,mBAAoBK,OACnCJ,EAAc,MAKd,SACI,uBACIK,SAhBhB,SAA2BH,GACvB,IAAQI,EAAUJ,EAAEK,OAAZD,MACRN,EAAcM,IAeFE,KAAK,OACLC,YAAY,qBACZH,MAAOP,SCvBdW,EAAc,SAACd,GACxB,IAAQe,EAAef,EAAfe,MAAOC,EAAQhB,EAARgB,IACf,OACI,qBAAKC,UAAU,yCAAf,SACI,qBAAKC,IAAKF,EAAKG,IAAKJ,O,uBCNnBK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEII,MAAMF,GAFV,cAEbG,EAFa,gBAGIA,EAASC,OAHb,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAd,GAClB,MAAO,CACHe,GAAIf,EAAIe,GACRhB,MAAOC,EAAID,MACXC,IAAKA,EAAIgB,OAAOC,iBAAiBV,IACjCW,KAAMlB,EAAImB,aAVC,kBAaZN,GAbY,4CAAH,sDCIPO,EAAU,SAACpC,GACpB,IAAQqB,EAAarB,EAAbqB,SACR,ECHwB,SAACA,GACzB,MAA0BnB,mBAAS,CAC/B0B,KAAM,GACNS,WAAW,IAFf,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACNpB,EAAQC,GAAUoB,MAAK,SAAAZ,GACnBU,EAAS,CACLX,KAAMC,EACNQ,WAAW,SAGpB,CAAChB,IAEGiB,EDZ2BI,CAAarB,GAAjCQ,EAAd,EAAQD,KAAYS,EAApB,EAAoBA,UACpB,OACI,gCACI,oBAAIpB,UAAU,WAAd,SAA0BI,IAC1B,qBAAKJ,UAAU,YAAf,SACMoB,EAOI,4CAPSR,EAAKC,KAAI,SAACd,GACrB,OAAO,cAAC,EAAD,CAEHD,MAAOC,EAAID,MACXC,IAAKA,EAAIA,IACTkB,KAAMlB,EAAIkB,MAHLlB,EAAIe,aET1B,SAASY,IAEZ,MAAoCzC,mBAAS,IAA7C,mBAAO0C,EAAP,KAAmBC,EAAnB,KAEA,OACI,gCACI,8CACA,cAAC,EAAD,CAAa5C,MAAO4C,IACpB,uBACuB,IAAtBD,EAAWE,QAAgB,mBAAG7B,UAAU,cAAb,0CAC5B,6BAC2B,IAAtB2B,EAAWE,OAAgBF,EAAWd,KAAI,SAACiB,EAAMC,GAC/C,OAAO,cAAC,EAAD,CAAoB3B,SAAU0B,GAAhBA,MAClB,UCZtBE,IAASC,OAAO,cAACP,EAAD,IACdQ,SAASC,eAAe,W","file":"static/js/main.61f74614.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nexport const AddCategory = (props) => {\n    const { onAdd } = props\n    const [inputValue, setInputValue] = useState('')\n\n    function handleInputChange(e) {\n        const { value } = e.target\n        setInputValue(value)\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault()\n        if (inputValue !== '') {\n            onAdd(prevValue => [inputValue, ...prevValue,])\n            setInputValue('')\n        }\n    }\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <input\n                    onChange={handleInputChange}\n                    type='text'\n                    placeholder='Type a category...'\n                    value={inputValue}\n                />\n            </form>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport const GifGridItem = (props) => {\n    const { title, gif } = props\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src={gif} alt={title} />\n            {/* <p>{title}</p> */}\n        </div>\n    )\n}\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=oSpgz3e16QGp058jziazELVtARGGjChR`\n    const response = await fetch(url)\n    const { data } = await response.json()\n\n    const gifs = data.map(gif => {\n        return {\n            id: gif.id,\n            title: gif.title,\n            gif: gif.images.downsized_medium.url,\n            user: gif.username\n        }\n    })\n    return gifs\n}","import React from 'react'\nimport { GifGridItem } from './GifGridItem'\nimport { useFetchGift } from '../hooks/useFetchGifs'\n\nexport const GifGrid = (props) => {\n    const { category } = props\n    const { data: gifs, isLoading } = useFetchGift(category);\n    return (\n        <div>\n            <h3 className='category'>{category}</h3>\n            <div className='card-grid'>\n                {!isLoading ? (gifs.map((gif) => {\n                    return <GifGridItem\n                        key={gif.id}\n                        title={gif.title}\n                        gif={gif.gif}\n                        user={gif.user}\n                    />\n                })) : <h1>Loading...</h1>}\n            </div>\n        </div>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\"\n\nexport const useFetchGift = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        isLoading: true\n    })\n\n    useEffect(() => {\n        getGifs(category).then(gifs => {\n            setState({\n                data: gifs,\n                isLoading: false\n            })\n        })\n    }, [category])\n\n    return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nexport function GifExpertApp() {\n\n    const [categories, setCategories] = useState([])\n\n    return (\n        <div>\n            <h2>GifExpertApp</h2>\n            <AddCategory onAdd={setCategories} />\n            <hr />\n            {categories.length === 0 && <p className='look-advice'>Look for something up there!</p>}\n            <ol>\n                {categories.length !== 0 ? (categories.map((cate, i) => {\n                   return <GifGrid key={cate} category={cate} />\n                })) : null}\n            </ol>\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp'\n\nReactDOM.render(<GifExpertApp/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}